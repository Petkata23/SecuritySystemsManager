@model SecuritySystemsManagerMVC.ViewModels.Chat.ChatConversationVm

<div class="card-header bg-white">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h5 class="mb-0">@Model.OtherUser.Username</h5>
            <small class="text-muted">@Model.OtherUser.Role.Name</small>
        </div>
        <div class="btn-group">
            <button class="btn btn-sm btn-outline-primary" id="markAsRead">
                <i class="fas fa-check-double"></i> Прочетено
            </button>
            <button class="btn btn-sm btn-outline-info" id="showUserInfo">
                <i class="fas fa-info-circle"></i> Информация
            </button>
        </div>
    </div>
</div>
<div class="card-body chat-messages" id="chatMessages">
    @if (Model.Messages != null)
    {
        foreach (var message in Model.Messages)
        {
            <div class="message @(message.IsFromSupport ? "sent" : "received")">
                <div class="message-content">@message.Message</div>
                <div class="message-info">
                    <span class="sender">@(message.IsFromSupport ? "Поддръжка" : (message.SenderName ?? "Unknown"))</span>
                    <span class="time">@message.Timestamp.ToLocalTime().ToString("HH:mm")</span>
                </div>
            </div>
        }
    }
</div>
<div class="card-footer bg-white">
    <div class="input-group">
        <input type="text" class="form-control" id="messageInput" placeholder="Въведете съобщение...">
        <button class="btn btn-primary" id="sendMessage">
            <i class="fas fa-paper-plane"></i>
        </button>
    </div>
</div>

<style>
    .chat-messages {
        height: 400px;
        overflow-y: auto;
        padding: 1rem;
        background: #f8fafc;
    }

    .message {
        margin-bottom: 1rem;
        max-width: 70%;
        opacity: 0;
        animation: slideIn 0.3s ease forwards;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .message.sent {
        margin-left: auto;
    }

    .message.received {
        margin-right: auto;
    }

    .message-content {
        padding: 0.75rem 1rem;
        border-radius: 16px;
        margin-bottom: 0.25rem;
        line-height: 1.5;
        font-size: 0.95rem;
    }

    .message.sent .message-content {
        background-color: #0d6efd;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .message.received .message-content {
        background-color: #f1f5f9;
        color: #1e293b;
        border-bottom-left-radius: 4px;
    }

    .message-info {
        font-size: 0.75rem;
        color: #64748b;
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .chat-input {
        padding: 1.25rem;
        border-top: 1px solid #eef2f7;
        background: #fff;
    }

    .chat-input .input-group {
        background: #f8fafc;
        border-radius: 12px;
        padding: 0.5rem;
    }

    .chat-input input {
        border: none;
        background: transparent;
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
    }

    .chat-input input:focus {
        box-shadow: none;
    }

    .chat-input button {
        border-radius: 8px;
        padding: 0.5rem 1rem;
        transition: all 0.2s ease;
    }

    .chat-input button:hover {
        transform: translateY(-1px);
    }

    /* Custom Scrollbar */
    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: #f1f5f9;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }
</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendMessage');
            let chatHistory = [];

            // Load chat history from localStorage
            function loadChatHistory() {
                const savedHistory = localStorage.getItem('chatHistory_@Model.CurrentUserId');
                if (savedHistory) {
                    try {
                        chatHistory = JSON.parse(savedHistory);
                    } catch (e) {
                        console.error('Error loading chat history:', e);
                        chatHistory = [];
                    }
                }
                
                // Load existing messages from server if no local history
                if (chatHistory.length === 0) {
                    loadExistingMessages();
                }
            }

            // Load existing messages from server
            function loadExistingMessages() {
                fetch('/Chat/GetChatMessages/@Model.OtherUserId')
                    .then(response => response.json())
                    .then(data => {
                        if (data.messages && data.messages.length > 0) {
                            data.messages.forEach(message => {
                                chatHistory.push({
                                    message: message.message,
                                    senderName: message.senderName,
                                    timestamp: message.timestamp,
                                    isFromSupport: message.isFromSupport
                                });
                            });
                            saveChatHistory();
                        }
                    })
                    .catch(err => console.error('Error loading existing messages:', err));
            }

            // Save chat history to localStorage
            function saveChatHistory() {
                // Keep only last 100 messages to avoid localStorage limits
                if (chatHistory.length > 100) {
                    chatHistory = chatHistory.slice(-100);
                }
                localStorage.setItem('chatHistory_@Model.CurrentUserId', JSON.stringify(chatHistory));
            }

            // SignalR connection setup
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            // SignalR event handlers
            connection.on("ReceiveMessage", (message) => {
                if (!message || !message.message) return;

                const newMessage = {
                    message: message.message,
                    isFromSupport: message.isFromSupport,
                    senderName: message.isFromSupport ? message.senderName : message.senderName,
                    timestamp: message.timestamp || new Date().toISOString()
                };
                
                appendMessage(newMessage);
            });

            // Start connection
            connection.start()
                .then(() => {
                    console.log('Connected to SignalR');
                    // Load chat history after connection is established
                    loadChatHistory();
                })
                .catch(err => console.error('Error connecting to SignalR:', err));

            // Scroll to bottom on load
            if (chatMessages) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Event listeners
            messageInput?.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            sendButton?.addEventListener('click', sendMessage);

            // Функция за добавяне на съобщение към чата
            function appendMessage(message) {
                if (!chatMessages) return;

                // Check if message already exists to avoid duplicates
                const existingMessages = chatMessages.querySelectorAll('.message');
                const messageExists = Array.from(existingMessages).some(msg => {
                    const content = msg.querySelector('.message-content')?.textContent;
                    const time = msg.querySelector('.time')?.textContent;
                    return content === message.message && time === formatTime(message.timestamp);
                });

                if (messageExists) {
                    console.log('Message already exists, skipping...');
                    return;
                }

                // Add message to history
                chatHistory.push({
                    message: message.message,
                    senderName: message.senderName,
                    timestamp: message.timestamp || new Date().toISOString(),
                    isFromSupport: message.isFromSupport
                });
                
                // Save to localStorage
                saveChatHistory();

                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.isFromSupport ? 'sent' : 'received'}`;
                messageDiv.innerHTML = `
                    <div class="message-content">${escapeHtml(message.message)}</div>
                    <div class="message-info">
                        <span class="sender">${escapeHtml(message.senderName)}</span>
                        <span class="time">${formatTime(message.timestamp)}</span>
                    </div>
                `;
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            // Функция за изпращане на съобщение
            async function sendMessage() {
                if (!messageInput || !messageInput.value.trim()) return;

                try {
                    const message = messageInput.value.trim();
                    
                    // Clear input immediately
                    messageInput.value = '';
                    
                    // Add message locally for better UX
                    const newMessage = {
                        message: message,
                        isFromSupport: false,
                        senderName: 'Вие',
                        timestamp: new Date().toISOString()
                    };
                    
                    appendMessage(newMessage);
                    
                    // Изпращаме съобщението чрез SignalR
                    await connection.invoke("SendUserMessage", message);
                    
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('Грешка при изпращане на съобщението. Моля, опитайте отново.');
                }
            }

            // Utility functions
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            function formatTime(date) {
                return new Date(date).toLocaleTimeString('bg-BG', { hour: '2-digit', minute: '2-digit' });
            }
        });
    </script>
} 