@model List<SecuritySystemsManager.Shared.Dtos.ChatConversationDto>
@{
    ViewData["Title"] = "Чат";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-comments"></i> Разговори
                        @if (ViewBag.UnreadCount > 0)
                        {
                            <span class="badge bg-danger ms-2">@ViewBag.UnreadCount</span>
                        }
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="conversations-list" id="conversationsList">
                        @if (Model != null && Model.Any())
                        {
                            foreach (var conversation in Model)
                            {
                                <div class="conversation-item @(conversation.UnreadCount > 0 ? "unread" : "")" 
                                     data-user-id="@conversation.UserId">
                                    <div class="conversation-avatar">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <div class="conversation-content">
                                        <div class="conversation-header">
                                            <h6 class="conversation-name">@conversation.UserName</h6>
                                            <small class="conversation-time">@conversation.LastMessageTime.ToLocalTime().ToString("HH:mm")</small>
                                        </div>
                                        <p class="conversation-last-message">@conversation.LastMessage</p>
                                    @if (conversation.UnreadCount > 0)
                                    {
                                            <span class="unread-badge">@conversation.UnreadCount</span>
                                    }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="fas fa-comments"></i>
                                <p>Няма активни разговори</p>
                                <small class="text-muted">Започнете разговор с поддръжката</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-headset"></i> Поддръжка
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="chat-container">
                        <div class="chat-messages" id="chatMessages">
                            <div class="welcome-message">
                                <div class="welcome-content">
                                    <i class="fas fa-headset"></i>
                                    <h4>Добре дошли в чат поддръжката!</h4>
                                    <p>Нашите експерти са тук, за да Ви помогнат с всякакви въпроси.</p>
                                    <small class="text-muted">Обикновено отговаряме в рамките на няколко минути</small>
                                </div>
                            </div>
                        </div>
                        <div class="chat-input">
                            <div class="input-group">
                                <input type="text" class="form-control" id="messageInput" 
                                       placeholder="Въведете съобщение..." disabled>
                                <button class="btn btn-primary" id="sendMessage" disabled>
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .conversations-list {
        max-height: 600px;
        overflow-y: auto;
    }

    .conversation-item {
        display: flex;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #eef2f7;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
    }

    .conversation-item:hover {
        background-color: #f8fafc;
    }

    .conversation-item.active {
        background-color: #e3f2fd;
        border-left: 3px solid #2196f3;
    }

    .conversation-item.unread {
        background-color: #fff3e0;
    }

    .conversation-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #e3f2fd;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        color: #2196f3;
    }

    .conversation-content {
        flex: 1;
        min-width: 0;
    }

    .conversation-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.25rem;
    }

    .conversation-name {
        margin: 0;
        font-size: 0.9rem;
        font-weight: 600;
        color: #1e293b;
    }

    .conversation-time {
        color: #64748b;
        font-size: 0.75rem;
    }

    .conversation-last-message {
        margin: 0;
        font-size: 0.8rem;
        color: #64748b;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .unread-badge {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: #f44336;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.7rem;
        font-weight: 600;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #64748b;
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #cbd5e1;
    }

    .chat-container {
        height: 600px;
        display: flex;
        flex-direction: column;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background: #f8fafc;
    }

    .welcome-message {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .welcome-content {
        text-align: center;
        color: #64748b;
    }

    .welcome-content i {
        font-size: 3rem;
        color: #cbd5e1;
        margin-bottom: 1rem;
    }

    .welcome-content h4 {
        margin-bottom: 0.5rem;
        color: #1e293b;
    }

    .message {
        margin-bottom: 1rem;
        max-width: 70%;
        opacity: 0;
        animation: slideIn 0.3s ease forwards;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(20px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .message.sent {
        margin-left: auto;
    }

    .message.received {
        margin-right: auto;
    }

    .message-content {
        padding: 0.75rem 1rem;
        border-radius: 16px;
        margin-bottom: 0.25rem;
        line-height: 1.5;
        font-size: 0.95rem;
    }

    .message.sent .message-content {
        background-color: #2196f3;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .message.received .message-content {
        background-color: white;
        color: #1e293b;
        border: 1px solid #e2e8f0;
        border-bottom-left-radius: 4px;
    }

    .message-info {
        font-size: 0.75rem;
        color: #64748b;
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .chat-input {
        padding: 1rem;
        border-top: 1px solid #e2e8f0;
        background: white;
    }

    .chat-input .input-group {
        background: #f8fafc;
        border-radius: 12px;
        padding: 0.5rem;
    }

    .chat-input input {
        border: none;
        background: transparent;
        padding: 0.5rem 1rem;
        font-size: 0.95rem;
    }

    .chat-input input:focus {
        box-shadow: none;
    }

    .chat-input button {
        border-radius: 8px;
        padding: 0.5rem 1rem;
        transition: all 0.2s ease;
    }

    .chat-input button:hover {
        transform: translateY(-1px);
    }

    .chat-input input:disabled,
    .chat-input button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    /* Custom Scrollbar */
    .conversations-list::-webkit-scrollbar,
    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    .conversations-list::-webkit-scrollbar-track,
    .chat-messages::-webkit-scrollbar-track {
        background: #f1f5f9;
    }

    .conversations-list::-webkit-scrollbar-thumb,
    .chat-messages::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .col-md-4 {
            margin-bottom: 1rem;
        }
        
        .conversations-list {
            max-height: 300px;
        }
        
        .chat-container {
            height: 400px;
        }
    }
</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendMessage');
            const conversationsList = document.getElementById('conversationsList');
            let currentConversationId = null;

            // SignalR connection setup
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .withAutomaticReconnect()
                .build();

            // SignalR event handlers
            connection.on("ReceiveMessage", (message) => {
                if (!message || !message.message) return;

                const newMessage = {
                    message: message.message,
                    isFromSupport: message.isFromSupport,
                    senderName: message.isFromSupport ? message.senderName : message.senderName,
                    timestamp: message.timestamp || new Date().toISOString()
                };
                
                appendMessage(newMessage);
            });

            // Start connection
            connection.start()
                .then(() => {
                    console.log('Connected to SignalR');
                })
                .catch(err => console.error('Error connecting to SignalR:', err));

            // Event listeners for conversations
            document.querySelectorAll('.conversation-item').forEach(item => {
                item.addEventListener('click', handleConversationClick);
            });

            // Event listeners for chat
            messageInput?.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });

            sendButton?.addEventListener('click', sendMessage);

            // Функция за обработка на клик върху разговор
            function handleConversationClick(e) {
                e.preventDefault();
                const userId = this.dataset.userId;
                if (userId) {
                    // Визуална индикация за избрания разговор
                    document.querySelectorAll('.conversation-item').forEach(item => {
                        item.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    // Активираме чата
                    currentConversationId = parseInt(userId);
                    messageInput.disabled = false;
                    sendButton.disabled = false;
                    messageInput.focus();
                    
                    // Зареждаме съобщенията
                    loadConversation(userId);
                }
            }

            // Функция за зареждане на разговор
            async function loadConversation(userId) {
                try {
                    const response = await fetch(`/Chat/Conversation/${userId}`);
                    if (response.ok) {
                        const html = await response.text();
                        // Тук бихме могли да парснем HTML и да покажем съобщенията
                        // За сега просто показваме, че разговорът е зареден
                        console.log('Conversation loaded for user:', userId);
                    }
                } catch (error) {
                    console.error('Error loading conversation:', error);
        }
            }

            // Функция за добавяне на съобщение към чата
        function appendMessage(message) {
                if (!chatMessages) return;

                // Check if message already exists to avoid duplicates
                const existingMessages = chatMessages.querySelectorAll('.message');
                const messageExists = Array.from(existingMessages).some(msg => {
                    const content = msg.querySelector('.message-content')?.textContent;
                    const time = msg.querySelector('.time')?.textContent;
                    return content === message.message && time === formatTime(message.timestamp);
                });

                if (messageExists) {
                    console.log('Message already exists, skipping...');
                    return;
                }

                // Премахваме welcome съобщението ако е първото съобщение
                const welcomeMessage = chatMessages.querySelector('.welcome-message');
                if (welcomeMessage) {
                    welcomeMessage.remove();
                }

                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.isFromSupport ? 'sent' : 'received'}`;
                messageDiv.innerHTML = `
                    <div class="message-content">${escapeHtml(message.message)}</div>
                    <div class="message-info">
                        <span class="sender">${escapeHtml(message.senderName)}</span>
                        <span class="time">${formatTime(message.timestamp)}</span>
                </div>
            `;
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
        }

            // Функция за изпращане на съобщение
            async function sendMessage() {
                if (!messageInput || !messageInput.value.trim() || !currentConversationId) return;

                try {
                    const message = messageInput.value.trim();
                    
                    // Clear input immediately
                    messageInput.value = '';
                    
                    // Add message locally for better UX
                    const newMessage = {
                        message: message,
                        isFromSupport: false,
                        senderName: 'Вие',
                        timestamp: new Date().toISOString()
                    };
                    
                    appendMessage(newMessage);
                    
                    // Изпращаме съобщението чрез SignalR
                    await connection.invoke("SendUserMessage", message);
                    
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('Грешка при изпращане на съобщението. Моля, опитайте отново.');
                }
            }

            // Utility functions
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
        }

            function formatTime(date) {
                return new Date(date).toLocaleTimeString('bg-BG', { hour: '2-digit', minute: '2-digit' });
        }
        });
    </script>
} 